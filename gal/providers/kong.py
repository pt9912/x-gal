"""
Kong provider implementation
"""

from ..provider import Provider
from ..config import Config


class KongProvider(Provider):
    """Kong API Gateway provider"""
    
    def name(self) -> str:
        return "kong"
    
    def validate(self, config: Config) -> bool:
        """Validate Kong configuration"""
        return True
    
    def generate(self, config: Config) -> str:
        """Generate Kong declarative configuration"""
        output = []
        output.append("# Kong Declarative Configuration Generated by GAL")
        output.append("_format_version: '3.0'")
        output.append("")
        output.append("services:")
        
        for service in config.services:
            output.append(f"- name: {service.name}")
            if service.type == "grpc":
                output.append("  protocol: grpc")
            else:
                output.append("  protocol: http")
            output.append(f"  host: {service.upstream.host}")
            output.append(f"  port: {service.upstream.port}")
            output.append("  routes:")
            
            for route in service.routes:
                output.append(f"  - name: {service.name}_route")
                output.append("    paths:")
                output.append(f"    - {route.path_prefix}")
                if route.methods:
                    output.append("    methods:")
                    for method in route.methods:
                        output.append(f"    - {method}")
            
            # Add transformation plugin if enabled
            if service.transformation and service.transformation.enabled:
                output.append("  plugins:")
                output.append("  - name: request-transformer")
                output.append("    config:")
                output.append("      add:")
                output.append("        headers:")
                for key, value in service.transformation.defaults.items():
                    output.append(f"        - x-default-{key}: '{value}'")
            
            output.append("")
        
        return "\n".join(output)
