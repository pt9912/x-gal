"""
Traefik provider implementation
"""

from ..provider import Provider
from ..config import Config


class TraefikProvider(Provider):
    """Traefik proxy provider"""
    
    def name(self) -> str:
        return "traefik"
    
    def validate(self, config: Config) -> bool:
        """Validate Traefik configuration"""
        return True
    
    def generate(self, config: Config) -> str:
        """Generate Traefik configuration"""
        output = []
        output.append("# Traefik Configuration Generated by GAL")
        output.append("")
        output.append("http:")
        output.append("  routers:")
        
        for service in config.services:
            for i, route in enumerate(service.routes):
                router_name = f"{service.name}_router_{i}"
                output.append(f"    {router_name}:")
                output.append(f"      rule: 'PathPrefix(`{route.path_prefix}`)'")
                output.append(f"      service: {service.name}_service")
                if service.transformation and service.transformation.enabled:
                    output.append("      middlewares:")
                    output.append(f"        - {service.name}_transform")
                output.append("")
        
        output.append("  services:")
        for service in config.services:
            output.append(f"    {service.name}_service:")
            output.append("      loadBalancer:")
            output.append("        servers:")
            output.append(f"        - url: 'http://{service.upstream.host}:{service.upstream.port}'")
            output.append("")
        
        # Middlewares for transformations
        has_transformations = any(s.transformation and s.transformation.enabled for s in config.services)
        if has_transformations:
            output.append("  middlewares:")
            for service in config.services:
                if service.transformation and service.transformation.enabled:
                    output.append(f"    {service.name}_transform:")
                    output.append("      plugin:")
                    output.append(f"        {service.name}_transformer:")
                    output.append("          defaults:")
                    for key, value in service.transformation.defaults.items():
                        output.append(f"            {key}: '{value}'")
                    output.append("")
        
        return "\n".join(output)
