"""
Traefik proxy provider implementation.

Generates Traefik dynamic configuration in YAML format with support
for HTTP routers, services, and middleware plugins.
"""

from ..provider import Provider
from ..config import Config


class TraefikProvider(Provider):
    """Traefik reverse proxy and load balancer provider.

    Generates dynamic configuration for Traefik, a modern HTTP reverse
    proxy and load balancer with automatic service discovery and
    Let's Encrypt support.

    Output Format:
        YAML file with dynamic configuration:
        - http.routers: Routing rules with PathPrefix matching
        - http.services: Backend service definitions with load balancing
        - http.middlewares: Transformation and manipulation plugins

    Transformations:
        Implemented using middleware plugins.
        Note: Middleware plugins require custom Go development.
        Generated config includes placeholder middleware definitions
        for default value transformations.

    gRPC Support:
        Traefik supports gRPC via HTTP/2 automatically.
        Routes are configured the same as REST services.

    Limitations:
        - Middleware plugins require Go development
        - No native computed field support
        - Transformations need custom middleware implementation
        - Focus on routing/load balancing, not payload manipulation

    Ideal For:
        - Docker Swarm and Kubernetes
        - Container-based deployments
        - Development environments
        - Automatic service discovery

    Example:
        >>> provider = TraefikProvider()
        >>> provider.name()
        'traefik'
        >>> config = Config.from_yaml("gateway.yaml")
        >>> output = provider.generate(config)
        >>> "http:" in output
        True

    See Also:
        https://doc.traefik.io/traefik/routing/overview/
    """

    def name(self) -> str:
        """Return provider name.

        Returns:
            str: "traefik"
        """
        return "traefik"

    def validate(self, config: Config) -> bool:
        """Validate configuration for Traefik.

        Traefik has minimal validation requirements at config generation.
        Most validation occurs when Traefik loads the configuration.

        Args:
            config: Configuration to validate

        Returns:
            True (Traefik validates at runtime)

        Example:
            >>> provider = TraefikProvider()
            >>> config = Config(...)
            >>> provider.validate(config)
            True
        """
        return True

    def generate(self, config: Config) -> str:
        """Generate Traefik dynamic configuration in YAML format.

        Creates Traefik dynamic config with routers, services, and
        optional middleware for transformations.

        Configuration Structure:
            - http:
                - routers: PathPrefix-based routing rules
                - services: LoadBalancer configurations
                - middlewares: Transformation plugins (if enabled)

        Args:
            config: Configuration object containing services

        Returns:
            Complete Traefik dynamic YAML configuration

        Example:
            >>> provider = TraefikProvider()
            >>> config = Config.from_yaml("config.yaml")
            >>> yaml_output = provider.generate(config)
            >>> "routers:" in yaml_output
            True
            >>> "services:" in yaml_output
            True
        """
        output = []
        output.append("# Traefik Configuration Generated by GAL")
        output.append("")
        output.append("http:")
        output.append("  routers:")
        
        for service in config.services:
            for i, route in enumerate(service.routes):
                router_name = f"{service.name}_router_{i}"
                output.append(f"    {router_name}:")
                output.append(f"      rule: 'PathPrefix(`{route.path_prefix}`)'")
                output.append(f"      service: {service.name}_service")
                if service.transformation and service.transformation.enabled:
                    output.append("      middlewares:")
                    output.append(f"        - {service.name}_transform")
                output.append("")
        
        output.append("  services:")
        for service in config.services:
            output.append(f"    {service.name}_service:")
            output.append("      loadBalancer:")
            output.append("        servers:")
            output.append(f"        - url: 'http://{service.upstream.host}:{service.upstream.port}'")
            output.append("")
        
        # Middlewares for transformations
        has_transformations = any(s.transformation and s.transformation.enabled for s in config.services)
        if has_transformations:
            output.append("  middlewares:")
            for service in config.services:
                if service.transformation and service.transformation.enabled:
                    output.append(f"    {service.name}_transform:")
                    output.append("      plugin:")
                    output.append(f"        {service.name}_transformer:")
                    output.append("          defaults:")
                    for key, value in service.transformation.defaults.items():
                        output.append(f"            {key}: '{value}'")
                    output.append("")
        
        return "\n".join(output)
