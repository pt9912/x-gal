"""
Envoy provider implementation
"""

from ..provider import Provider
from ..config import Config


class EnvoyProvider(Provider):
    """Envoy proxy provider"""
    
    def name(self) -> str:
        return "envoy"
    
    def validate(self, config: Config) -> bool:
        """Validate Envoy configuration"""
        if config.global_config.port == 0:
            raise ValueError("Port must be specified")
        return True
    
    def generate(self, config: Config) -> str:
        """Generate Envoy configuration"""
        output = []
        output.append("# Envoy Configuration Generated by GAL")
        output.append(f"# Provider: {config.provider}")
        output.append(f"# Services: {len(config.services)} ({len(config.get_grpc_services())} gRPC, {len(config.get_rest_services())} REST)")
        output.append("")
        
        # Static resources
        output.append("static_resources:")
        output.append("  listeners:")
        output.append("  - name: listener_0")
        output.append("    address:")
        output.append("      socket_address:")
        output.append(f"        address: {config.global_config.host}")
        output.append(f"        port_value: {config.global_config.port}")
        output.append("    filter_chains:")
        output.append("    - filters:")
        output.append("      - name: envoy.filters.network.http_connection_manager")
        output.append("        typed_config:")
        output.append("          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager")
        output.append("          stat_prefix: ingress_http")
        output.append("          codec_type: AUTO")
        output.append("          route_config:")
        output.append("            name: local_route")
        output.append("            virtual_hosts:")
        output.append("            - name: backend")
        output.append("              domains: ['*']")
        output.append("              routes:")
        
        # Routes
        for service in config.services:
            for route in service.routes:
                output.append(f"              - match:")
                output.append(f"                  prefix: '{route.path_prefix}'")
                if service.type == "grpc":
                    output.append("                  grpc: {}")
                output.append("                route:")
                output.append(f"                  cluster: {service.name}_cluster")
        
        # HTTP filters
        output.append("          http_filters:")
        
        # Add transformation filter if any service has transformations
        has_transformations = any(s.transformation and s.transformation.enabled for s in config.services)
        if has_transformations:
            output.append("          - name: envoy.filters.http.lua")
            output.append("            typed_config:")
            output.append("              '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua")
            output.append("              inline_code: |")
            output.append("                function envoy_on_request(request_handle)")
            output.append("                  -- Transformation logic here")
            output.append("                  local path = request_handle:headers():get(':path')")
            
            for service in config.services:
                if service.transformation and service.transformation.enabled:
                    output.append(f"                  -- {service.name} transformations")
                    for route in service.routes:
                        output.append(f"                  if string.find(path, '{route.path_prefix}') then")
                        output.append("                    local body = request_handle:body()")
                        output.append("                    if body then")
                        output.append("                      -- Apply defaults and computed fields")
                        output.append("                    end")
                        output.append("                  end")
            
            output.append("                end")
        
        output.append("          - name: envoy.filters.http.router")
        output.append("            typed_config:")
        output.append("              '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router")
        output.append("")
        
        # Clusters
        output.append("  clusters:")
        for service in config.services:
            output.append(f"  - name: {service.name}_cluster")
            output.append("    type: STRICT_DNS")
            output.append("    lb_policy: ROUND_ROBIN")
            if service.type == "grpc":
                output.append("    http2_protocol_options: {}")
            output.append("    load_assignment:")
            output.append(f"      cluster_name: {service.name}_cluster")
            output.append("      endpoints:")
            output.append("      - lb_endpoints:")
            output.append("        - endpoint:")
            output.append("            address:")
            output.append("              socket_address:")
            output.append(f"                address: {service.upstream.host}")
            output.append(f"                port_value: {service.upstream.port}")
            output.append("")
        
        # Admin
        output.append("admin:")
        output.append("  address:")
        output.append("    socket_address:")
        output.append(f"      address: {config.global_config.host}")
        output.append(f"      port_value: {config.global_config.admin_port}")
        
        return "\n".join(output)
