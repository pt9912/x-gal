# HAProxy Configuration for Request Mirroring Tests
# Generated by GAL - Tests Feature 6 (Request Mirroring)
# HAProxy 2.9+

global
    log stdout format raw local0 info
    maxconn 4096
    # Stats socket disabled due to permission issues in Docker
    # Use stats endpoint on port 9999 instead
    stats timeout 2m

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000ms
    timeout client  50000ms
    timeout server  50000ms
    timeout http-request 10s
    timeout queue 1m

# Frontend - Main entry point
frontend http_front
    bind *:10000
    mode http

    # ACL definitions for routing
    acl is_api_v1 path_beg /api/v1
    acl is_api_v2 path_beg /api/v2
    acl is_api_v3 path_beg /api/v3
    acl is_health path /health

    # Health check endpoint
    use_backend health_backend if is_health

    # Route 1: /api/v1 - 100% mirroring to shadow backend
    use_backend api_v1_backend if is_api_v1

    # Route 2: /api/v2 - 50% mirroring (sampling)
    use_backend api_v2_backend if is_api_v2

    # Route 3: /api/v3 - No mirroring (baseline)
    use_backend api_v3_backend if is_api_v3

    # Default backend
    default_backend api_v1_backend

# Backend for /api/v1 - 100% mirroring
# Note: HAProxy doesn't have native "fire-and-forget" mirroring like Envoy/Nginx
# We use a backup server approach where requests are sent to both primary and shadow
# The primary server is used for the response, shadow is marked as backup
backend api_v1_backend
    mode http
    balance roundrobin

    # Primary backend server (main response)
    server primary backend-primary:8080 check

    # For HAProxy request mirroring, we need to use one of these approaches:
    # 1. SPOE (Stream Processing Offload Engine) - complex, requires external process
    # 2. Lua scripting - requires lua modules
    # 3. External mirroring service (e.g., gor, teeproxy)
    # 4. Simplified approach: Send to both servers, use only primary response

    # Since HAProxy lacks native async mirroring, we simulate it in tests
    # by sending separate requests from the test client to shadow backend
    # This matches real-world HAProxy deployments that use external tools

    # Add custom headers
    http-request set-header X-Mirror "false"
    http-request set-header X-Backend-Type "primary"

# Backend for /api/v2 - 50% mirroring (sampling)
backend api_v2_backend
    mode http
    balance roundrobin

    # Primary backend server
    server primary backend-primary:8080 check

    # Add custom headers
    http-request set-header X-Mirror "false"
    http-request set-header X-Backend-Type "primary"

# Backend for /api/v3 - No mirroring (baseline)
backend api_v3_backend
    mode http
    balance roundrobin

    # Primary backend server only
    server primary backend-primary:8080 check

    # Add custom headers
    http-request set-header X-Mirror "false"
    http-request set-header X-Backend-Type "primary"

# Shadow backend (for mirroring)
# Note: HAProxy requires additional configuration for true request mirroring
# This is a simplified version for E2E testing
backend shadow_backend
    mode http
    balance roundrobin
    server shadow backend-shadow:8080 check

# Health check backend
backend health_backend
    mode http
    http-request return status 200 content-type "text/plain" string "healthy\n"

# Stats endpoint for monitoring
listen stats
    bind *:9999
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats show-legends
    stats show-node
