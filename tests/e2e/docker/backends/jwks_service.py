#!/usr/bin/env python3
"""
Simple HTTP server for serving a dummy JWKS for JWT validation testing.
Used for testing Envoy's jwt_authn filter.
"""

import json
import os
from http.server import BaseHTTPRequestHandler, HTTPServer

# Generated JWKS with valid RSA public key for JWT validation
# Generated by: tests/e2e/docker/tools/keygen/generate_local.py
JWKS = {
    "keys": [
        {
            "kty": "RSA",
            "kid": "test-key",
            "n": "u6TiwTmAHx-oqnfjQ6aj0wgOlpyfrGU0IXmPE7yOo3LlKwuXUb7IFn6TNb7PZhJ7bCHMFKiqGCfKdrsee_bNRRmnLadmRFEVAdR8yx9rEspfAJXewzTlCdPtSXpp38QJjtRAHO4HR5Xlw9pZZVAI5pLuqQEZcpTiY00PR2EIPhJxpowoH9LPWK30iK8XYn6zgEy29Rp1dga6Ocb9GNaObeivRpTCTVsqg8OvNIhdnx0LCtuxiNzDq5W1BUcryAE64XTit8o0xz6wqSqF4CYvurQgna00XUt5Wri7MOob6dSLFZ4E3QrWdPKXU4bSji7kJ5T-3LWl6suc6Y5RMqpXUw",
            "e": "AQAB",
            "alg": "RS256",
            "use": "sig"
        }
    ]
}

class JWKSHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/.well-known/jwks.json":
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()

            response = JWKS
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(json.dumps({"error": "Invalid endpoint"}).encode())

    def do_POST(self):
        self.send_response(405)
        self.end_headers()
        self.wfile.write(json.dumps({"error": "Method not allowed"}).encode())

    def do_PUT(self):
        self.send_response(405)
        self.end_headers()
        self.wfile.write(json.dumps({"error": "Method not allowed"}).encode())

    def do_DELETE(self):
        self.send_response(405)
        self.end_headers()
        self.wfile.write(json.dumps({"error": "Method not allowed"}).encode())

    def log_message(self, format, *args):
        # Suppress default logging
        pass

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    server = HTTPServer(("0.0.0.0", port), JWKSHandler)
    print(f"JWKS test service listening on port {port}")
    server.serve_forever()