# Envoy Configuration Generated by GAL
# Provider: envoy
# Services: 1 (0 gRPC, 0 REST)
# Features: Advanced Routing mit JWT-Auth und GeoIP

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains: ['*']
              routes:
              # 1. Header-based Routing: API Version
              - match:
                  prefix: '/api'
                  headers:
                  - name: X-API-Version
                    exact_match: 'v2'
                route:
                  cluster: api_service_v2_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "header_X-API-Version_v2"

              # 2. Header-based Routing: Mobile User-Agent
              - match:
                  prefix: '/api'
                  headers:
                  - name: User-Agent
                    string_match:
                      contains: 'Mobile'
                route:
                  cluster: api_service_mobile_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "header_User-Agent_Mobile"

              # 3. Header-based Routing: Beta Features
              - match:
                  prefix: '/api'
                  headers:
                  - name: X-Beta-Features
                    exact_match: 'enabled'
                route:
                  cluster: api_service_beta_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "header_X-Beta-Features_enabled"

              # 4. Query Parameter Routing: version=2
              - match:
                  prefix: '/api'
                  query_parameters:
                  - name: version
                    string_match:
                      exact: '2'
                route:
                  cluster: api_service_v2_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "query_version_2"

              # 5. Query Parameter Routing: beta=true
              - match:
                  prefix: '/api'
                  query_parameters:
                  - name: beta
                    string_match:
                      exact: 'true'
                route:
                  cluster: api_service_beta_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "query_beta_true"

              # 6. Query Parameter Routing: admin present
              - match:
                  prefix: '/api'
                  query_parameters:
                  - name: admin
                    present_match: true
                route:
                  cluster: api_service_admin_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "query_admin_present"

              # 7. JWT Claim-based Routing: role=admin
              # Requires JWT to be validated and payload extracted
              - match:
                  prefix: '/api/admin'
                  headers:
                  - name: Authorization
                    prefix_match: 'Bearer '
                route:
                  cluster: api_service_admin_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "jwt_role_admin"
                      requires_jwt: "true"

              # 8. Geo-based Routing: country=DE -> EU Backend
              # Requires ext_authz GeoIP lookup
              - match:
                  prefix: '/api/eu'
                route:
                  cluster: api_service_eu_backend_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "geo_country_DE"
                      requires_geoip: "true"

              # 9. Default Fallback Route
              - match:
                  prefix: '/api'
                route:
                  cluster: api_service_cluster
                metadata:
                  filter_metadata:
                    envoy.lb:
                      routing_rule: "fallback_default"

          http_filters:
          # Filter 1: JWT Authentication
          - name: envoy.filters.http.jwt_authn
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                jwt_provider:
                  issuer: "https://jwks-service"
                  audiences:
                    - "x-gal-test"
                  remote_jwks:
                    http_uri:
                      uri: "http://jwks-service:8080/.well-known/jwks.json"
                      cluster: jwks_cluster
                      timeout: 5s
                    cache_duration:
                      seconds: 300
                  payload_in_metadata: "jwt_payload"
                  forward_payload_header: "X-JWT-Payload"
              rules:
              # JWT optional für alle /api Routen (aber erforderlich für /api/admin)
              - match:
                  prefix: "/api/admin"
                requires:
                  provider_name: "jwt_provider"
              - match:
                  prefix: "/api"
                requires:
                  allow_missing_or_failed: {}

          # Filter 2: External Authorization (GeoIP Lookup)
          - name: envoy.filters.http.ext_authz
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: geoip_grpc_cluster
                timeout: 0.5s
              failure_mode_allow: true  # Allow traffic if GeoIP service is down
              with_request_body:
                max_request_bytes: 1024
                allow_partial_message: true
              metadata_context_namespaces:
                - envoy.filters.http.ext_authz
              clear_route_cache: true

          # Filter 3: Lua Filter für fortgeschrittene JWT Claim Routing
          - name: envoy.filters.http.lua
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  function envoy_on_request(request_handle)
                    -- Extract JWT payload metadata
                    local metadata = request_handle:metadata()
                    if metadata ~= nil and metadata["jwt_payload"] ~= nil then
                      local jwt_payload = metadata["jwt_payload"]

                      -- Add JWT claims as headers for debugging
                      if jwt_payload["role"] ~= nil then
                        request_handle:headers():add("X-JWT-Role", jwt_payload["role"])
                      end
                      if jwt_payload["sub"] ~= nil then
                        request_handle:headers():add("X-JWT-Subject", jwt_payload["sub"])
                      end
                    end

                    -- Extract GeoIP metadata from ext_authz
                    local geo_metadata = request_handle:metadata():get("envoy.filters.http.ext_authz")
                    if geo_metadata ~= nil and geo_metadata["country"] ~= nil then
                      request_handle:headers():add("X-Geo-Country", geo_metadata["country"])
                    end

                    -- Log routing decision
                    local path = request_handle:headers():get(":path")
                    local method = request_handle:headers():get(":method")
                    request_handle:logInfo(string.format("Request: %s %s", method, path))
                  end

                  function envoy_on_response(response_handle)
                    -- Add routing metadata to response headers for debugging
                    local metadata = response_handle:metadata()
                    if metadata ~= nil and metadata["envoy.lb"] ~= nil then
                      local routing_rule = metadata["envoy.lb"]["routing_rule"]
                      if routing_rule ~= nil then
                        response_handle:headers():add("X-Routing-Rule", routing_rule)
                      end
                    end
                  end

          # Filter 4: Router (Must be last)
          - name: envoy.filters.http.router
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
  # Backend Clusters
  - name: api_service_v2_backend_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_v2_backend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-v2
                port_value: 8080
    # Version 2 API backend

  - name: api_service_admin_backend_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_admin_backend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-admin
                port_value: 8080
    # Admin API with extended permissions

  - name: api_service_eu_backend_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_eu_backend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-eu
                port_value: 8080
    # EU region backend for GDPR compliance

  - name: api_service_beta_backend_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_beta_backend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-beta
                port_value: 8080
    # Beta features backend

  - name: api_service_mobile_backend_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_mobile_backend_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-mobile
                port_value: 8080
    # Optimized mobile API backend

  - name: api_service_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: api_service_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-v1
                port_value: 8080
    # Default v1 backend

  # Service Clusters
  - name: jwks_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    load_assignment:
      cluster_name: jwks_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: jwks-service
                port_value: 8080
    # JWKS service for JWT validation

  - name: geoip_grpc_cluster
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    connect_timeout: 5s
    http2_protocol_options: {}
    load_assignment:
      cluster_name: geoip_grpc_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: geoip-service
                port_value: 9090
    # GeoIP gRPC service for geo-based routing

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
