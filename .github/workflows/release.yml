name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      run: |
        python -m build

    - name: Create archive
      run: |
        cd ..
        tar -czf gal-${{ github.ref_name }}.tar.gz \
          --exclude='x-gal/.git' \
          --exclude='x-gal/venv' \
          --exclude='x-gal/__pycache__' \
          --exclude='x-gal/*.pyc' \
          --exclude='x-gal/.pytest_cache' \
          --exclude='x-gal/.coverage' \
          --exclude='x-gal/dist' \
          x-gal
        mv gal-${{ github.ref_name }}.tar.gz x-gal/

    - name: Upload artifacts to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          gal-${{ github.ref_name }}.tar.gz

  publish-pypi:
    name: Publish to PyPI (Optional)
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: false  # Enable when ready to publish to PyPI

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution packages
      run: |
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
