# HAProxy Configuration Example
# This example demonstrates various HAProxy features that can be imported to GAL format

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

#---------------------------------------------------------------------
# Common defaults
#---------------------------------------------------------------------
defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 10s
    timeout client  50s
    timeout server  50s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

#---------------------------------------------------------------------
# Main frontend - HTTP traffic
#---------------------------------------------------------------------
frontend http_front
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem

    # ACLs for path-based routing
    acl is_api path_beg /api
    acl is_static path_beg /static
    acl is_admin path_beg /admin
    acl is_websocket hdr(Upgrade) -i WebSocket

    # Routing rules
    use_backend api_backend if is_api
    use_backend static_backend if is_static
    use_backend admin_backend if is_admin
    use_backend websocket_backend if is_websocket
    default_backend app_backend

#---------------------------------------------------------------------
# API Backend - Load balanced with health checks
#---------------------------------------------------------------------
backend api_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1
    http-request set-header X-Backend api
    http-request set-header X-Request-ID %[uuid()]

    # Servers with weights
    server api1 api1.internal:8080 check weight 3
    server api2 api2.internal:8080 check weight 2
    server api3 api3.internal:8080 check weight 1

#---------------------------------------------------------------------
# Static Content Backend - Least connections
#---------------------------------------------------------------------
backend static_backend
    balance leastconn
    option httpchk HEAD /ping HTTP/1.1

    server static1 static1.internal:8080 check
    server static2 static2.internal:8080 check

#---------------------------------------------------------------------
# Admin Backend - IP hash with sticky sessions
#---------------------------------------------------------------------
backend admin_backend
    balance source
    cookie ADMINID insert indirect nocache
    option httpchk GET /health HTTP/1.1

    server admin1 admin1.internal:8080 check cookie admin1
    server admin2 admin2.internal:8080 check cookie admin2

#---------------------------------------------------------------------
# WebSocket Backend
#---------------------------------------------------------------------
backend websocket_backend
    balance leastconn
    option http-server-close
    option forceclose

    server ws1 ws1.internal:8080
    server ws2 ws2.internal:8080

#---------------------------------------------------------------------
# Application Backend - URI hash with sticky sessions
#---------------------------------------------------------------------
backend app_backend
    balance uri
    cookie APPID insert indirect
    option httpchk GET /status HTTP/1.1
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-Proto https if { ssl_fc }

    # Servers with health checks
    server app1 app1.internal:8080 check inter 5s fall 3 rise 2 cookie app1
    server app2 app2.internal:8080 check inter 5s fall 3 rise 2 cookie app2
    server app3 app3.internal:8080 check inter 5s fall 3 rise 2 cookie app3

#---------------------------------------------------------------------
# Stats Backend (Listen section example)
#---------------------------------------------------------------------
listen stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
