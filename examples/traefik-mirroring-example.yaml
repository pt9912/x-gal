# GAL Request Mirroring Example for Traefik
# Feature 6: Request Mirroring/Shadowing
#
# ⚠️ IMPORTANT: Traefik does NOT have native request mirroring
#    This example generates a config that requires a custom Traefik plugin
#    or workaround implementation (see docs/guides/TRAEFIK_FEATURES.md)

version: "1.0"
provider: traefik

global:
  port: 8080

services:
  # Scenario 1: Simple Request Mirroring (100%)
  # Use Case: Test new version with all production traffic
  # Note: Requires traefik-mirror-plugin or custom middleware
  - name: api_service_simple_mirror
    type: rest
    protocol: http
    upstream:
      host: api-primary
      port: 8080
    routes:
      - path_prefix: /api/v1
        methods: [GET, POST, PUT, DELETE]
        mirroring:
          enabled: true
          mirror_request_body: true
          mirror_headers: true
          targets:
            - name: shadow-v2
              upstream:
                host: shadow-backend
                port: 8080
              sample_percentage: 100.0
              timeout: "5s"
              headers:
                X-Mirror: "true"
                X-Shadow-Version: "v2"

  # Scenario 2: Sampled Mirroring (50%)
  # Use Case: Performance testing with subset of traffic
  - name: api_service_sampled_mirror
    type: rest
    protocol: http
    upstream:
      host: api-primary
      port: 8080
    routes:
      - path_prefix: /api/v2
        methods: [GET, POST]
        mirroring:
          enabled: true
          mirror_request_body: true
          mirror_headers: true
          targets:
            - name: shadow-v2-sampled
              upstream:
                host: shadow-backend
                port: 8080
              sample_percentage: 50.0
              timeout: "3s"
              headers:
                X-Mirror-Sampling: "50"

  # Scenario 3: No Mirroring (Baseline)
  # Use Case: Regular traffic without mirroring
  - name: api_service_baseline
    type: rest
    protocol: http
    upstream:
      host: api-primary
      port: 8080
    routes:
      - path_prefix: /api/v3
        methods: [GET, POST]
        # No mirroring configured - baseline for comparison

  # Scenario 4: Headers-Only Mirroring
  # Use Case: Reduce shadow backend load (no body copying)
  - name: api_service_headers_only
    type: rest
    protocol: http
    upstream:
      host: api-primary
      port: 8080
    routes:
      - path_prefix: /api/products
        methods: [GET]
        mirroring:
          enabled: true
          mirror_request_body: false  # Only copy headers, not body
          mirror_headers: true
          targets:
            - name: shadow-analytics
              upstream:
                host: shadow-analytics
                port: 8080
              sample_percentage: 100.0
              timeout: "2s"

  # Scenario 5: Production Testing Before Rollout
  # Use Case: Validate new deployment with real traffic
  - name: api_service_production_test
    type: rest
    protocol: http
    upstream:
      host: api-stable
      port: 8080
    routes:
      - path_prefix: /api/payments
        methods: [POST]
        mirroring:
          enabled: true
          mirror_request_body: true
          mirror_headers: true
          targets:
            - name: shadow-new-deployment
              upstream:
                host: api-new
                port: 8080
              sample_percentage: 100.0
              timeout: "10s"
              headers:
                X-Mirror: "true"
                X-Test-Deployment: "true"
